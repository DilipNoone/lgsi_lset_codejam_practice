# Quick Find Implementation of disjoint sets

class UnionFind:
    # initializing union find constructor
    # by creating an array of given size
    # with values equal to corresponding
    # array indices;this requires linear time
    def __init__(self, size):
        self.root = [i for i in range(size)]

    # each call to find requires O(1) time
    # since we are just accessing the element
    # at given index
    def find(self, x):
        return self.root[x]

    # each call to union requires O(n) time
    # since it has to traverse through entire
    # array and update root vertices of all
    # the vertices of the set that is going
    # to merged into another set
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)

        if rootX != rootY:
            for i in range(len(self.root)):
                if self.root[i] == rootY:
                    self.root[i] = rootX

    # connected operation takes o(1) time
    # since it involves two find calls and
    # equal operation.
    def connected(self, x, y):
        return self.find(x) == self.find(y)


uf = UnionFind(10)
uf.union(1, 2)
uf.union(2, 5)
uf.union(5, 6)
uf.union(6, 7)
uf.union(3, 8)
uf.union(8, 9)
print(uf.connected(1, 5))
print(uf.connected(5, 7))
print(uf.connected(4, 9))
uf.union(9, 4)
print(uf.connected(4, 9))
